# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TerraQgisDialog
                                 A QGIS plugin
 TerraQgis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-02-09
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Furinets O
        email                : some@some.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from PyQt5.QtCore import QSettings

import requests


# For fast review
class Client:

    def __init__(self, api_url: str):
        self._api_url = api_url
        self._api_key = None

    def _perform_request(
            self,
            method: str,
            resource: str,
            data: dict,
            headers: dict = None,
    ) -> requests.Response:
        return requests.request(
            method=method,
            url=self._build_url(resource),
            json=data,
            headers=self._build_headers(headers),
        )

    @property
    def api_key(self):
        return self._api_key

    @api_key.setter
    def api_key(self, key):
        self._api_key = key

    def _build_headers(self, headers):
        if not headers:
            headers = {}

        headers.setdefault("api-key", self._api_key)

    def _build_url(self, path):
        return f"{self._api_url}{path}"


class TerraClient(Client):
    """A Facade for Terra Services Http Integration"""

    def upload_abstract_data(self, data: dict):
        resource = "/upload_abstract_data"
        return self._perform_request(
            method="POST",
            resource=resource,
            data=data,
        )

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'terra_qgis_dialog_base.ui'))


class TerraQgisDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, settings: QSettings, transport=None, parent=None):
        """Constructor."""
        super(TerraQgisDialog, self).__init__(parent)
        self.setupUi(self)

        self.setWindowTitle("TerraCloud menu")

        self.settings = settings
        self.transport = transport or self.default_transport

        self.setup_submit_button()
        self.setup_input_token_bar()
        self.setup_sync_button()

    def setup_submit_button(self):
        self.applyApiKeyButton.clicked.connect(self.input_bar_processing_callback)

    def setup_sync_button(self):
        self.syncCloudServiceButton.clicked.connect(self.sync_bar_processing_callback)

    def setup_input_token_bar(self):
        message_info = "Input token here..."
        self.apiKeyInputBar.setText(self.tr(message_info))

    def input_bar_processing_callback(self):
        token = self.apiKeyInputBar.text()

        if token is None:
            return

        self.apiKeyInputBar.clear()
        self.save_api_key(token)

    def sync_bar_processing_callback(self):
        self.transport.api_key = self.get_api_key()

        abstract_data = {"Abstract": "Data"}

        self.transport.upload_abstract_data(data=abstract_data)

    def save_api_key(self, token: str):
        self.settings.setValue("Api-Key", token)

    def get_api_key(self):
        return self.settings.value("Api-Key")

    @property
    def default_transport(self):
        return TerraClient(
            api_url=self.settings.value("Api-Url", "https://example.com"),
        )
